@page "/game"
@inject HttpClient Http
@inject NavigationManager NavManager
@using System.Timers;

<div class="container ">
    <div class="col-11 mx-auto">
        <!-- Title -->
        <div class="row d-flex justify-content-center align-items-center">
            <img style="height:50px;" src="card_assets/card_logo.png" />
            <h2 class="font-italic ml-3"><strong>Race to 21</strong></h2>
        </div>

        <!-- Game Over reason -->
        <div class=" row my-3 mx-5 align-items-center description-block @GameUI.ShowOverReason">
            <h3 class="mx-auto">@GameUI.OverReasonDescription</h3>
        </div>

        <!-- Players block -->
        <div class="row my-5 d-flex flex-wrap justify-content-center">
            @if (Game.players.Count <= 4)
            {
                GameUI.playerBlockWidth = "col-4";
            }
            else
            {
                GameUI.playerBlockWidth = "col-8";
            }
            <div class=" @GameUI.playerBlockWidth d-flex flex-wrap flex-column " style="height: 500px; ">

                @for (int player = 0; player < Game.players.Count; player++)
                {
                <div class="row my-1 mx-1 player-block">
                    <!-- Name -->
                    @if (GameUI.isGameOver && @Game.players[player].status == PlayerStatus.win)
                    {
                        GameUI.nameStyle = "name-background-win";
                    }
                    else
                    {
                        GameUI.nameStyle = "name-background";
                    }
                    <div class="row mx-5 position-absolute  @GameUI.nameStyle" >
                            <h4 class="name-overlap ">@Game.players[player].name</h4>
                    </div>
                    

                    <!-- Card & Score -->

                    @if (player == Game.currentPlayer && !GameUI.isGameOver)
                    {
                        GameUI.blockStatus = "card-block-turn";
                    }
                    else if (@Game.players[player].status == PlayerStatus.bust || @Game.players[player].status == PlayerStatus.stay)
                    {
                        GameUI.blockStatus = "card-block-inactive";
                    }
                    else if (@Game.players[player].status == PlayerStatus.win && GameUI.isGameOver)
                    {
                        GameUI.blockStatus = "card-block-win";
                    }
                    else
                    {
                        GameUI.blockStatus = "";
                    }


                    <div class="row d-flex justify-content-betweenm-2 m-2 mt-3 py-3 flex-nowrap card-block  @GameUI.blockStatus">

                        <!-- Card -->
                        <div class="col-10 d-flex align-items-center overlow-hidden  pt-2 hand-cards">
                            @if (Game.players[player].cards.Count != 0)
                            {
                                foreach (Card card in Game.players[player].cards)
                                {
                                    <img class="cards" style="height: 50px; margin-left:-10px;" src="@Deck.cardsFileName[card.Id]" />
                                }
                            }
                            else
                            {
                                <small class="card-empty font-italic">No card in your hand yet</small>
                            }
                        </div>

                        <!-- Score -->
                        <div class="col-1 d-flex align-items-center justify-content-center flex-column">

                            <!-- Crwon -->
                            @if(Game.players[player].status == PlayerStatus.win)
                            {
                                GameUI.showCrown = "d-block";
                            }
                            else
                            {
                                GameUI.showCrown = "d-none";
                            }
                            <img class="position-absolute crown-style @GameUI.showCrown" src="/crown.png" />

                            <!-- Score and frozen status-->
                            @if (@Game.players[player].status == PlayerStatus.bust)
                            {
                                <h3 class="text-right font-italic mb-0 score-bust">@Game.players[player].score</h3>
                                <h6 class="text-right font-italic mt-0 score-bust">@Game.players[player].status.ToString()</h6>

                            }
                            else if (@Game.players[player].status == PlayerStatus.stay)
                            {
                                <h3 class="text-right font-italic mb-0 score-stay">@Game.players[player].score</h3>
                                <h6 class="text-right font-italic mt-0 score-stay">@Game.players[player].status.ToString()</h6>

                            }
                            else
                            {
                                if (Game.players[player].status == PlayerStatus.win)
                                { GameUI.scoreWin = "font-weight-bold"; }
                                else
                                {
                                    GameUI.scoreWin = "";
                                }

                                <h3 class="text-right  m-2 @GameUI.scoreWin">@Game.players[player].score</h3>
                            }

                        </div>
                    </div>
                </div>
                }


            </div>
            <!-- Player Choices -->
            <div class="col-3 mt-2 @GameUI.showPlayerChoices">
                <div class="row option-block p-4 d-flex mx-auto flex-column" style="max-width:250px;">
                    <h4 class="text-center">@Game.players[Game.currentPlayer].name</h4>
                    <h5 class="text-center">
                        it's your turn!
                    </h5>
                    <!-- Request -->
                    <button type="button" class="btn btn-secondary my-2" @onclick="RequestCard">Draw</button>
                    <!-- Stay -->
                    <button type="button" class="btn btn-secondary my-2" @onclick="Stay">Stay</button>
                </div>
            </div>

            <!-- Game Choices -->
            <div class="col-3 mt-2 @GameUI.showGameChoices">
                <div class="row option-block p-4 d-flex mx-auto flex-column">
                    <h5 class="text-center">What a fun game!</h5>
                    <button type="button" class="btn btn-primary my-2" @onclick="PlayAgain">Play again</button>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Modal for setting up players -->
<SetPlayersModal @ref="SetPlayerModal"></SetPlayersModal>



@code{


    /*** for SetPlayersModal ***/
    private SetPlayersModal SetPlayerModal { get; set; }


    // This timer part may be a bit tricky but I haven't find out a better way to deal with the problem I met
    // I create a timer as trigger to re-render this page
    // This is for the situation when the players would like to play again,
    // after they edit the list and start the game,
    // there is no event could trigger the page to re-render the page
    // because they just close the modal and not access this page from other page.
    // I've also tried to make this page reload automatically,
    // however, once the page reload, it would crash
    // because it has not get the player list yet.

    Timer timer = new Timer(1000);

    protected override void OnInitialized()
    {
        timer.Elapsed += Timer_Tick;
        timer.Start();

        base.OnInitialized();
    }

    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    /* ********* onclick: RequestCard() **********
         * Request a card
         * Onclick event for "request" btn
         * INPUT: none
         * OUTPUT: none
         */
    private void RequestCard()
    {
        Player player = Game.players[Game.currentPlayer]; // pass current player

        DoTurns(player);

        CheckWin(player);

        CardTable.CalEveryone();

        CheckForBust(Game.players, Game.currentPlayer);

        CheckForNoActive();
    }

    /* ********* onclick: Stay() **********
         * Stay
         * Onclick event for "Stay" btn
         * INPUT: none
         * OUTPUT: none
         */
    private void Stay()
    {
        Game.players[Game.currentPlayer].status = PlayerStatus.stay; // change the player's status to stay

        CardTable.CalEveryone();


        //find out the highest score
        if (Game.players[Game.currentPlayer].score > Game.highScore)
        {
               Game.highScore = Game.players[Game.currentPlayer].score;
               Game.winnerIndex = Game.currentPlayer;
        }


        CheckForNoActive();



    }

    /* ********* DoTurns() **********
         * Process the current player
         * Called by Request() method
         * INPUT: Player player --> the player who we are processing
         * OUTPUT: none
         */
    private void DoTurns(Player player)
    {
        if (player.status == PlayerStatus.active) // if the curretn player's status is active
        {
            Card card = Game.deck.DealTopCard(); // pass the top card
            player.cards.Add(card); // give the top card to the current player
            player.score = Game.ScoreHand(player); // calculate score the player has
        }

    }

    /* ********* CheckWin() **********
         * Check whether the current player win obviously or not
         * Called by Request() method
         * INPUT: Player player --> the player who we are checking
         * OUTPUT: none
         */
    private void CheckWin(Player player)
    {
        if (player.score > 21) // if score is more than 21 --> bust
        {
            player.status = PlayerStatus.bust; // change the player's status to bust
        }
        else if (player.score == 21) // if score exactly hits 21
        {
            player.status = PlayerStatus.win; // change the player's status to win
            player.winReason = OverReason.hitTwentyOne;

            OverGame(player.winReason); // game is over
        }
        else if (player.cards.Count == 5) // if the player already has 5 cards
        {
            player.status = PlayerStatus.win; // change the player's status to win
            player.winReason = OverReason.gotFiveCards;

            OverGame(player.winReason); // game is over
        }
        else
        {
            return;
        }
    }

    /* ********* CheckForBust() **********
       * Process the situation that everyone is inactive
       * Called by Request() method
       * INPUT: List<Player> players --> player list
       *        int current --> the index of the current player
       * OUTPUT: none
       */
    private void CheckForBust(List<Player> players, int current)
    {
        //if the current player is bust and there is only one potential player left
        if (Game.players[current].status == PlayerStatus.bust && GameUI.potentialWinnerNum == 1)
        {
            Game.players.ForEach(x =>
            {
                if (x.status != PlayerStatus.bust)
                {
                    x.status = PlayerStatus.win; // change the player's status to win
                    x.winReason = OverReason.othersAreBust;
                    OverGame(x.winReason);
                }
            });
        }
    }


    /* ********* CheckForNoActive() **********
        * Process the situation that everyone is inactive
        * Called by Request() method
        * INPUT: none
        * OUTPUT: none
        */
    private void CheckForNoActive()
    {
        if (GameUI.activeNum == 0) // if there is no active players
        {

            if(Game.highScore != 0)
            {
                Game.players[Game.winnerIndex].status = PlayerStatus.win;
                Game.players[Game.winnerIndex].winReason = OverReason.stayButHighestScore;
                OverGame(Game.players[Game.winnerIndex].winReason); // game is over
            }
            else
            {
                //everyone is zero and stay
                Console.WriteLine("zero");
                OverGame(OverReason.everyoneIsStayAndZero);
            }

        }
        else // game continues...
        {

            ContinueGame();
        }

    }


/* ********* ContinueGame() **********
    * Continue game
    * Called by CheckForNoActive() method
    * INPUT: none
    * OUTPUT: none
    */
private void ContinueGame()
{
    Game.currentPlayer++; // index moves on

    if (Game.currentPlayer > Game.players.Count - 1) // if the current index is out of the range of the length of list
    {
        Game.currentPlayer = 0; // back to the first player...
    }

    //skip frozen palyers (bust and stay)
    while (Game.players[Game.currentPlayer].status == PlayerStatus.stay || Game.players[Game.currentPlayer].status == PlayerStatus.bust)
    {
        Game.currentPlayer++; // index moves on
        if (Game.currentPlayer > Game.players.Count - 1) // if the current index is out of the range of the length of list
        {
            Game.currentPlayer = 0; // back to the first player...
        }

        if (GameUI.isGameOver)
        {
            break;
        }
    }

    Game.nextTask = Tasks.PlayerTurn; // change next task to player turns
}


/* ********* OverGame() **********
* Calculate the numbers for counters
* Called when game is over
* INPUT: OverReason reason --> the reason of game over
* OUTPUT: none
*/
private void OverGame(OverReason reason)
{
    GameUI.isGameOver = true;
    GameUI.ShowOverReason = "d-flex";


    if (reason == OverReason.everyoneIsStayAndZero)
    {
        GameUI.OverReasonDescription = "Come on, everyone...please be agressive!";
    }
    else
    {
        Player winner = new Player("");
        Game.players.ForEach(x => { if (x.status == PlayerStatus.win) winner = x; });
        AnnounceWinner(winner);
    }

    ShowPlayAgain();
}

/* ********* AnnounceWinner() **********
* Announce the winner and show the win reason
* Called by OverGame() method
* INPUT: Player player ---> the winner player
* OUTPUT: none
*/
private void AnnounceWinner(Player player)
{
    //GameUI.ShowOverReason = "d-flex";

    // show the win reason based on different conditions
    switch (player.winReason)
    {
        case OverReason.hitTwentyOne:
            GameUI.OverReasonDescription = player.name + " hits 21!";
            break;

        case OverReason.gotFiveCards:
            GameUI.OverReasonDescription = player.name + " has 5 cards and haven't bustted yet!";
            break;

        case OverReason.stayButHighestScore:
            GameUI.OverReasonDescription = player.name + " has the highest score firstly and others are frozen!";
            break;

        case OverReason.othersAreBust:
            GameUI.OverReasonDescription = player.name + " wins because others are bust!";
            break;

        default:
            break;

    }
}


/* ********* ShowPlayAgain() **********
* Show game choice (play again btn)
* Called by OverGame() method
* INPUT: none
* OUTPUT: none
*/
private void ShowPlayAgain()
{
    GameUI.showPlayerChoices = "d-none";
    GameUI.showGameChoices = "d-block";
}

/* ********* onlcick: PlayAgain() **********
* Open the setting up player list modal with the current list
* Onclick event for PlayAgain btn
* INPUT: none
* OUTPUT: none
*/
private void PlayAgain()
{
    checkPreviousList();
    SetPlayerModal.Open();

}

/* ********* checkPreviousList() **********
* Pass the names of current players list to previousList
* Called by PlayAgain() method
* INPUT: none
* OUTPUT: none
*/
private void checkPreviousList()
{
    Game.previousList = new List<string>(new string[8]);

    int i = 0;
    Game.players.ForEach(x => {
        Game.previousList[i] = x.name;
        Console.WriteLine(Game.previousList[i]);
        i++;
    });
}

}
