@page "/game"
@inject HttpClient Http
@inject NavigationManager NavManager


<div class="container ">
    <div class="col-11 mx-auto">
        <!-- Title -->
        <div class="row d-flex justify-content-center align-items-center">
            <img style="height:50px;" src="card_assets/card_logo.png" />
            <h2 class="font-italic ml-3"><strong>Race to 21</strong></h2>
        </div>

        <!-- Game Over reason -->
        <div class=" row my-3 mx-auto align-items-center description-block @ShowOverReason">
            <h3 class="mx-auto">@OverReasonDescription</h3>
        </div>

        <!-- Players block -->
        <div class="row my-5 d-flex flex-wrap justify-content-center">
            @if (Game.players.Count <= 4)
            {
                playerBlockWidth = "col-4";
            }
            else
            {
                playerBlockWidth = "col-8";
            }
            <div class=" @playerBlockWidth d-flex flex-wrap flex-column " style="height: 500px; ">

                @for (int player = 0; player < Game.players.Count; player++)
                {
                    <div class="row my-1 mx-1 player-block">
                        <!-- Name -->
                        @if (isGameOver && @Game.players[player].status == PlayerStatus.win)
                        {
                            nameStyle = "name-background-win";
                        }
                        else
                        {
                            nameStyle = "name-background";
                        }
                        <div class="row ml-5 mt-0 position-absolute @nameStyle"><h4 class="name-overlap ">@Game.players[player].name</h4></div>

                        <!-- Card & Score -->

                        @if (player == Game.currentPlayer && !isGameOver)
                        {
                            blockStatus = "card-block-turn";
                        }
                        else if (@Game.players[player].status == PlayerStatus.bust || @Game.players[player].status == PlayerStatus.stay)
                        {
                            blockStatus = "card-block-inactive";
                        }
                        else if (@Game.players[player].status == PlayerStatus.win && isGameOver)
                        {
                            blockStatus = "card-block-win";
                        }
                        else
                        {
                            blockStatus = "";
                        }


                        <div class="row d-flex justify-content-betweenm-2 m-2 mt-3 py-3 flex-nowrap card-block  @blockStatus">

                            <!-- Card -->
                            <div class="col-10 d-flex align-items-center overlow-hidden  pt-2 hand-cards">
                                @foreach (Card card in Game.players[player].cards)
                                {
                                    <img class="cards" style="height: 50px; margin-left:-10px;" src="@Deck.cardsFileName[card.Id]" />
                                }
                            </div>

                            <!-- Score -->
                            <div class="col-1 d-flex align-items-center justify-content-center flex-column">
                                @if (@Game.players[player].status == PlayerStatus.bust)
                                {
                                    <h3 class="text-right font-italic mb-0 score-bust">@Game.players[player].score</h3>
                                    <h6 class="text-right font-italic mt-0 score-bust">@Game.players[player].status.ToString()</h6>

                                }
                                else if (@Game.players[player].status == PlayerStatus.stay)
                                {
                                    <h3 class="text-right font-italic mb-0 score-stay">@Game.players[player].score</h3>
                                    <h6 class="text-right font-italic mt-0 score-stay">@Game.players[player].status.ToString()</h6>

                                }
                                else
                                {
                                    if (Game.players[player].status == PlayerStatus.win)
                                    { scoreWin = "font-weight-bold"; }
                                    else
                                    {
                                        scoreWin = "";
                                    }

                                    <h3 class="text-right  m-2 @scoreWin">@Game.players[player].score</h3>
                                }

                            </div>
                        </div>
                    </div>
                }


            </div>
            <!-- Player Choices -->
            <div class="col-3 mt-2 @showPlayerChoices">
                <div class="row option-block p-4 d-flex mx-auto flex-column" style="max-width:250px;">
                    <h4 class="text-center">@Game.players[Game.currentPlayer].name</h4>
                    <h5 class="text-center">
                        it's your turn!
                    </h5>
                    <button type="button" class="btn btn-secondary my-2" @onclick="RequestCard">Request</button>
                    <button type="button" class="btn btn-secondary my-2" @onclick="Stay">Stay</button>
                </div>
            </div>

            <!-- Game Choices -->
            <div class="col-3 mt-2 @showGameChoices">
                <div class="row option-block p-4 d-flex mx-auto flex-column">
                    <h5 class="text-center">What a fun game!</h5>
                    <button type="button" class="btn btn-primary my-2" @onclick="PlayAgain">Play again</button>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Modal for editting players -->
    <EditPlayersModal @ref="EditPlayerModal"></EditPlayersModal>


@code{

    string ShowOverReason = "hidden";
    string playerBlockWidth = "col-8";
    string OverReasonDescription;
    string scoreStyle = "";
    string inactiveStatus = "hidden";
    string blockStatus = "";
    string scoreWin = "";
    string nameStyle = "";
    string showPlayerChoices = "d-block";
    string showGameChoices = "d-none";
    bool isGameOver = false;
    string showModal = "d-none";

    int activeNum = Game.players.Count;
    int potentialWinnerNum = 0;
    int stayNum = 0;

    /*** for EditPlayersModal ***/
    private EditPlayersModal EditPlayerModal { get; set; }

    protected override Task OnInitializedAsync()
    {
       ShowOverReason = "hidden";
        playerBlockWidth = "col-8";
        scoreStyle = "";
        inactiveStatus = "hidden";
        blockStatus = "";
        scoreWin = "";
        nameStyle = "";
        showPlayerChoices = "d-block";
        showGameChoices = "d-none";
        isGameOver = false;
        showModal = "d-none";

        activeNum = Game.players.Count;
        potentialWinnerNum = 0;
        stayNum = 0;

        return base.OnInitializedAsync();
    }

    private void RequestCard()
    {
        Game.players.ForEach(x => Console.WriteLine(x.name));
        Player player = Game.players[Game.currentPlayer]; // pass current player

        DoTurns(player);

        CheckWin(player);

        CheckForBust(Game.players, Game.currentPlayer);

        CheckEveryone();

        CheckForNoActive();


    }

    protected void Stay()
    {

        Game.players[Game.currentPlayer].status = PlayerStatus.stay; // change the player's status to stay
        CheckEveryone();
        CheckForNoActive();

    }


    private void DoTurns(Player player)
    {
        //if (nextTask == Tasks.PlayerTurn) // player turns

        Game.cardTable.ShowHands(Game.players); // show the player's cards
                                                //Player player = players[currentPlayer]; // pass current player

        if (player.status == PlayerStatus.active) // if the curretn player's status is active
        {
            Card card = Game.deck.DealTopCard(); // pass the top card
            player.cards.Add(card); // give the top card to the current player
            player.score = Game.ScoreHand(player); // calculate score the player has
        }

        if (Game.nextTask != Tasks.GameOver) // if game isn't over yet
        {
            //cardTable.ShowHand(player);
            Game.nextTask = Tasks.CheckForEnd; // change next task to CheckForEnd
        }

    }

    private void CheckWin(Player player)
    {
        if (player.score > 21) // if score is more than 21 --> bust
        {
            player.status = PlayerStatus.bust; // change the player's status to bust
        }
        else if (player.score == 21) // if score exactly hits 21
        {
            player.status = PlayerStatus.win; // change the player's status to win
            player.winReason = OverReason.hitTwentyOne;
            Game.nextTask = Tasks.CheckForEnd;  // change next task to CheckForEnd

            OverGame(player.winReason); // game is over
        }
        else if (player.cards.Count == 5) // if the player already has 5 cards
        {
            player.status = PlayerStatus.win; // change the player's status to win
            player.winReason = OverReason.gotFiveCards;
            Game.nextTask = Tasks.CheckForEnd;  // change next task to CheckForEnd

            OverGame(player.winReason); // game is over
        }
        else
        {
            return;
        }
    }

    private void CheckForNoActive()
    {
        //if (nextTask == Tasks.CheckForEnd) // check for end this round

        if (activeNum == 0) // if there is no active players
        {
            int highScore = -1;
            int winnerIndex = -1;

            for (int i = 0; i < Game.players.Count; i++)
            {
                if (Game.players[i].status == PlayerStatus.stay) // still could win...
                {
                    //find out the highest score
                    if (Game.players[i].score > highScore)
                    {
                        highScore = Game.players[i].score;
                        winnerIndex = i;
                    }
                }
            }

            Game.players[winnerIndex].status = PlayerStatus.win;
            Game.players[winnerIndex].winReason = OverReason.stayButHighestScore;

            OverGame(Game.players[winnerIndex].winReason); // game is over

        }
        else // game continues...
        {

            ContinueGame();
        }

    }

    private void ContinueGame()
    {
        Game.currentPlayer++; // index moves on

        if (Game.currentPlayer > Game.players.Count - 1) // if the current index is out of the range of the length of list
        {
            Game.currentPlayer = 0; // back to the first player...
        }

        //skip
        while (Game.players[Game.currentPlayer].status == PlayerStatus.stay || Game.players[Game.currentPlayer].status == PlayerStatus.bust)
        {
            Game.currentPlayer++; // index moves on
            if (Game.currentPlayer > Game.players.Count - 1) // if the current index is out of the range of the length of list
            {
                Game.currentPlayer = 0; // back to the first player...
            }

            if (isGameOver)
            {
                break;
            }
        }

        Game.nextTask = Tasks.PlayerTurn; // change next task to player turns
    }

    private void CheckForBust(List<Player> players, int current)
    {

        if (Game.players[current].status == PlayerStatus.bust && potentialWinnerNum == 1)
        {
            Game.players.ForEach(x =>
            {
                if (x.status != PlayerStatus.bust)
                {
                    x.status = PlayerStatus.win; // change the player's status to win
                    x.winReason = OverReason.othersAreBust;
                    OverGame(x.winReason);
                }
            });
        }
    }

    private void CheckEveryone()
    {
        activeNum = 0;
        potentialWinnerNum = 0;
        stayNum = 0;

        foreach (var p in Game.players) // check every player
        {
            if (p.status == PlayerStatus.active)
            {
                activeNum++;
            }

            if (p.status == PlayerStatus.active || p.status == PlayerStatus.stay)
            {
                potentialWinnerNum++;
            }

            if (p.status == PlayerStatus.stay)
            {
                stayNum++;
            }
        }

        @*Console.WriteLine("stayNum" + stayNum);
            if (stayNum == Game.players.Count)
            {
                OverGame(OverReason.everyoneIsStay);
            }*@

    }

    private void OverGame(OverReason reason)
    {
        ShowOverReason = "d-flex";
        isGameOver = true;

        if (reason == OverReason.everyoneIsStay)
        {
            OverReasonDescription = "Come on, everyone...please be agressive!";
        }
        else
        {
            Player winner = new Player("");
            Game.players.ForEach(x => { if (x.status == PlayerStatus.win) winner = x; });
            AnnounceWinner(winner);
        }

        ShowPlayAgain();
    }



    /* ********* AnnounceWinner() **********
    * Announce the winner and show the win reason
    * Called by Game object
    * INPUT: Player player ---> the winner player
    * OUTPUT: none
    */
    private void AnnounceWinner(Player player)
    {
        ShowOverReason = "d-flex";

        // show the win reason based on different conditions
        switch (player.winReason)
        {
            case OverReason.hitTwentyOne:
                OverReasonDescription = player.name + " hits 21!";
                Console.WriteLine(player.name + " hits 21!");
                break;

            case OverReason.gotFiveCards:
                OverReasonDescription = player.name + " has 5 cards and haven't bustted yet!";
                Console.WriteLine(player.name + " has 5 cards and haven't bustted yet!");
                break;

            case OverReason.stayButHighestScore:
                OverReasonDescription = player.name + " has the highest score and others are frozen!";
                Console.WriteLine(player.name + " has the highest score and others are frozen!");
                break;

            case OverReason.othersAreBust:
                OverReasonDescription = player.name + " wins because others are bust!";
                Console.WriteLine(player.name + " wins because others are bust!");
                break;

            default:
                break;

        }
    }

    private void ShowPlayAgain()
    {
        showPlayerChoices = "d-none";
        showGameChoices = "d-block";


    }

    private void PlayAgain()
    {
        checkPreviousList();
        EditPlayerModal.Open();

    }

    //private void checkList()
    private void checkPreviousList()
    {

    int i = 0;
    Game.players.ForEach(x => {
        Game.previousList[i] = x.name;
        Console.WriteLine(Game.previousList[i]);
        i++;
    });
}

}
