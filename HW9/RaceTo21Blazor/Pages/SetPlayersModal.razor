@page "/setPlayer"
@inject NavigationManager NavManager

<!-- SetPlayersModal -->
<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">

            <!-- Header: title, close-btn, hint -->
            <div class="modal-header d-flex flex-column  align-items-center">
                <!-- Title -->
                <div class="row col-12">
                    <h2 class="mx-auto mt-4 text-center">Who are the players?<br></h2>
                </div>
                <!-- CLose btn -->
                <div class="row col-12 position-absolute mr-2 justify-content-end ">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="() => Close()">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <!-- Hint -->
                <div class="row mt-2 ">
                    <small class="mx-auto text-center @hintWarning">Please enter at least 2 distinct player names.</small>
                </div>
            </div>

            <!-- Body: name fields-->
            <div class="modal-body my-0 py-0">
                <div class="col my-3 my-0 py-0">
                    <form>
                        <div class="col d-flex flex-wrap flex-column align-content-center" style="height: 250px; ">
                            <div class="form-group d-flex align-items-center mr-2">
                                <!-- Player number 1 -->
                                <label for="playersName" class="m-2"><strong>#1</strong></label>
                                <!-- Name input -->
                                <input type="text" class="form-control name-input @nameWarning[0]" placeholder="e.g. Anna" @bind="playerNameList[0]" />
                            </div>

                            <div class="form-group d-flex align-items-center mr-2">
                                <!-- Player number 2 -->
                                <label for="playersName" class="m-2"><strong>#2</strong></label>
                                <!-- Name input -->
                                <input type="text" class="form-control name-input @nameWarning[1]" placeholder="e.g. Belle" @bind="playerNameList[1]" />
                            </div>

                            <div class="form-group d-flex align-items-center mr-2">
                                <!-- Player number 3 -->
                                <label for="playersName" class="m-2"><strong>#3</strong></label>
                                <!-- Name input -->
                                <input type="text" class="form-control name-input @nameWarning[2]" placeholder="e.g. Charles" @bind="playerNameList[2]" />
                            </div>

                            <div class="form-group d-flex align-items-center mr-2">
                                <!-- Player number 4 -->
                                <label for="playersName" class="m-2"><strong>#4</strong></label>
                                <!-- Name input -->
                                <input type="text" class="form-control name-input @nameWarning[3]" placeholder="e.g. Dave" @bind="playerNameList[3]" />
                            </div>

                            <div class="form-group d-flex align-items-center mr-2">
                                <!-- Player number 5 -->
                                <label for="playersName" class="m-2"><strong>#5</strong></label>
                                <!-- Name input -->
                                <input type="text" class="form-control name-input @nameWarning[4]" placeholder="e.g. Emily" @bind="playerNameList[4]" />
                            </div>

                            <div class="form-group d-flex align-items-center mr-2">
                                <!-- Player number 6 -->
                                <label for="playersName" class="m-2"><strong>#6</strong></label>
                                <!-- Name input -->
                                <input type="text" class="form-control name-input @nameWarning[5]" placeholder="e.g. Frank" @bind="playerNameList[5]" />
                            </div>

                            <div class="form-group d-flex align-items-center mr-2">
                                <!-- Player number 7 -->
                                <label for="playersName" class="m-2"><strong>#7</strong></label>
                                <!-- Name input -->
                                <input type="text" class="form-control name-input @nameWarning[6]" placeholder="e.g. Gianna" @bind="playerNameList[6]" />
                            </div>

                            <div class="form-group d-flex align-items-center mr-2">
                                <!-- Player number 8 -->
                                <label for="playersName" class="m-2"><strong>#8</strong></label>
                                <!-- Name input -->
                                <input type="text" class="form-control name-input @nameWarning[7]" placeholder="e.g. Hailey" @bind="playerNameList[7]" />
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Footer: hint, btns-->
            <div class="modal-footer row w-100 d-flex flex-column mx-auto mb-4">
                <!-- Hint -->
                <div class="row mb-4">
                    <small class="mx-auto text-center">We will shuffle your order in the game.</small>
                </div>
                <!-- Buttons -->
                <div class="row d-flex w-100 mx-auto  justify-content-center">
                    <!-- Close btn -->
                    <button type="button" class="btn btn-secondary mx-2" data-dismiss="modal" @onclick="() => Close()">Close</button>
                    <!-- Start Game btn -->
                    <button type="button" class="btn btn-primary mx-2" style="width:400px;" @onclick="StartGame">Start Game</button>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Modal Backdrop -->
@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}

<!-- Reference:
    I learned how to use Modal here.
    I've tried to use the boostrap's modal and searched several methods,
    but this is the only method that works for me.
    https://stackoverflow.com/questions/59256798/how-to-use-bootstrap-modal-in-blazor-client-app
    -->



@code {

    List<string> playerNameList = Game.previousList;
    List<Player> playerListTemp = new List<Player>();
    List<string> duplicatedList = new List<string>();
    string[] nameWarning = new string[8];

    int maxPlayers = 8;
    string hintWarning = "";

    /* ********* onclick: StartGame() **********
         * Start game
         * Onclick event for "start game" btn
         * INPUT: none
         * OUTPUT: none
         */
    private void StartGame()
    {

        GetPlayerNameList();

        CheckDupliclatedNames();

        // if there is any name is duplicated, block
        if (MarkDuplicated())
        {
            return;
        }

        if (CheckMoreThanTwo())
        {
            // create a new game
            Game game = new Game(new CardTable(), playerListTemp);

            NavManager.NavigateTo("/game");
        }
        else // if the number of players is invalid, block
        {
            return;
        }

        resetPage(); // reset the page style

        Close(); // close modal

    }

    /* ********* GetPlayerNameList() **********
         * Get player name list from the screen
         * Called by StartGame() method
         * INPUT: none
         * OUTPUT: none
         */
    private void GetPlayerNameList()
    {
        playerListTemp = new List<Player>();

        playerNameList.ForEach(x =>
        {
            if (x != null && x != "" && x != string.Empty)
            {
                playerListTemp.Add(new Player(x));
            }
        });

        if (!playerNameList.Contains(Game.previousWinner)){
            Game.previousWinner = "";
        };

    }

    /* ********* CheckMoreThanTwo() **********
         * Check there are more than two players or stay on the setting page
         * Called by StartGame() method
         * INPUT: none
         * OUTPUT: bool - TRUE  The number of players is valid
         *              - FALSE There are less than 2 players or more than 8
         */
    private bool CheckMoreThanTwo()
    {
        if (playerListTemp.Count >= 2 && playerListTemp.Count <= maxPlayers)
        {
            hintWarning = "";
            return true;
        }
        else
        {
            hintWarning = "showWarning";
            return false;
        }
    }

    /* ********* CheckDupliclatedNames() **********
     * Check the times of showing up for each name
     * Called by StartGame() method
     * INPUT: none
     * OUTPUT: none
     */
    private void CheckDupliclatedNames()
    {
        //I use the value of dictionary as counter to record how many times the name shows up
        Dictionary<string, int> nameOccurrence = new Dictionary<string, int>();

        playerNameList.ForEach(x =>
        {
            if (x != null)
            {
                if (x != "")
                {
                    // I found this method can return whether there contains the key (x) I give in the dictionary
                    // https://www.geeksforgeeks.org/c-sharp-dictionary-containskey-method/
                    // if x is not in the dictionary 
                    if (!nameOccurrence.ContainsKey(x))
                    {
                        nameOccurrence.Add(x, 0); // add it into the dictionary and set th value is 0
                    }

                    // find the key (x) and add 2 to its value 
                    nameOccurrence[x] += 1;
                }
            }
        });

        duplicatedList = new List<string>();

        foreach (KeyValuePair<string, int> kvpair in nameOccurrence)
        {
            if (kvpair.Value > 1)
            {
                duplicatedList.Add(kvpair.Key);
            }
        }

    }

    /* ********* MarkDuplicated() **********
     * Check there are more than two players or stay on the setting page
     * Called by StartGame() method
     * INPUT: none
     * OUTPUT: bool - TRUE  There is something marked and block the following action
     *              - FALSE There is nothing marked
     */
    private bool MarkDuplicated()
    {
        for (int i = 0; i < nameWarning.Length; i++)
        {
            nameWarning[i] = "";
        }

        if (duplicatedList.Count != 0)
        {
            hintWarning = "showWarning";

            duplicatedList.ForEach(x =>
            {
                int i = 0;

                playerNameList.ForEach(y =>
                {
                    if (x == y)
                    {
                        nameWarning[i] = "name-warning";
                    }

                    i++;
                });
            });

            return true;
        }

        return false;
    }

    /* ********* resetPage() **********
     * Reset the page
     * Called by StartGame() method
     * INPUT: none
     * OUTPUT: none
     */
    public void resetPage()
    {
        GameUI.ShowOverReason = "hidden";
        GameUI.playerBlockWidth = "col-8";
        GameUI.scoreStyle = "";
        GameUI.inactiveStatus = "hidden";
        GameUI.blockStatus = "";
        GameUI.scoreWin = "";
        GameUI.nameStyle = "";
        GameUI.showPlayerChoices = "d-block";
        GameUI.showGameChoices = "d-none";
        GameUI.isGameOver = false;
        GameUI.showModal = "d-none";

        GameUI.activeNum = 0;
        GameUI.potentialWinnerNum = 0;
        GameUI.stayNum = 0;

        Game.currentPlayer = 0;
        Game.highScoreInStay = -1;
        Game.winnerIndexInStay = -1;

    }


    /*** for Modal ***/

    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none";
    public string ModalClass = "";
    public bool ShowBackdrop = false;

    public void Open()
    {
        ModalDisplay = "block";
        ModalClass = "Show";
        ShowBackdrop = true;
        StateHasChanged();
    }


    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
    }
}



