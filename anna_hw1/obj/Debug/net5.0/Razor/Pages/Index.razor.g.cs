#pragma checksum "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/Pages/Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "a23a5d472c2a82b01eff4acc6300f405ada1d89e"
// <auto-generated/>
#pragma warning disable 1591
namespace anna_hw1.Pages
{
    #line hidden
    using System;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/_Imports.razor"
using anna_hw1;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/_Imports.razor"
using anna_hw1.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/Pages/Index.razor"
using System.Timers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/Pages/Index.razor"
using System.Collections.Generic;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
            __builder.AddMarkupContent(0, @"<style>
    .container {
        width: 400px;
    }

    .btn-animal {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }

    .btn-play {
        width: 200px;
        height: 80px;
        font-size: 30px;
    }

    .hidden {
        visibility: hidden;
    }

    .show {
        visibility: visible;
    }
</style>




");
            __builder.OpenElement(1, "div");
            __builder.AddAttribute(2, "class", "container");
            __builder.OpenElement(3, "div");
            __builder.AddAttribute(4, "class", "row");
#nullable restore
#line 37 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/Pages/Index.razor"
         for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber]; // animal emoji
            var showAnimal = showAnimals[animalNumber];
            var btnId = $"btn-{animalNumber}"; // btn ID
            var indexAnimal = animalNumber;


#line default
#line hidden
#nullable disable
            __builder.OpenElement(5, "div");
            __builder.AddAttribute(6, "class", "col-3");
            __builder.OpenElement(7, "button");
            __builder.AddAttribute(8, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 46 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/Pages/Index.razor"
                                    () => ButtonClick2(animal, indexAnimal)

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(9, "type", "button");
            __builder.AddAttribute(10, "class", "btn btn-outline-dark btn-animal");
            __builder.AddAttribute(11, "id", 
#nullable restore
#line 47 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/Pages/Index.razor"
                                                                    btnId

#line default
#line hidden
#nullable disable
            );
            __builder.OpenElement(12, "h1");
            __builder.AddContent(13, 
#nullable restore
#line 49 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/Pages/Index.razor"
                         showAnimal

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.CloseElement();
#nullable restore
#line 52 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/Pages/Index.razor"

        }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.AddMarkupContent(14, "\n\n    \n    ");
            __builder.OpenElement(15, "div");
            __builder.AddAttribute(16, "class", "row");
            __builder.OpenElement(17, "h2");
            __builder.AddContent(18, "Matches found: ");
            __builder.AddContent(19, 
#nullable restore
#line 58 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/Pages/Index.razor"
                            matchesFound

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(20, "\n\n    \n    ");
            __builder.OpenElement(21, "div");
            __builder.AddAttribute(22, "class", "row");
            __builder.OpenElement(23, "h2");
            __builder.AddContent(24, "Time: ");
            __builder.AddContent(25, 
#nullable restore
#line 63 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/Pages/Index.razor"
                   timeDisplay

#line default
#line hidden
#nullable disable
            );
            __builder.CloseElement();
            __builder.CloseElement();
            __builder.AddMarkupContent(26, "\n\n    ");
            __builder.OpenElement(27, "div");
            __builder.AddAttribute(28, "class", "row");
#nullable restore
#line 67 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/Pages/Index.razor"
         if (@matchesFound == 8)
        {

#line default
#line hidden
#nullable disable
            __builder.OpenElement(29, "button");
            __builder.AddAttribute(30, "onclick", Microsoft.AspNetCore.Components.EventCallback.Factory.Create<Microsoft.AspNetCore.Components.Web.MouseEventArgs>(this, 
#nullable restore
#line 69 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/Pages/Index.razor"
                                () => ButtonPlayAgainClick()

#line default
#line hidden
#nullable disable
            ));
            __builder.AddAttribute(31, "type", "button");
            __builder.AddAttribute(32, "class", "btn btn-outline-dark btn-play");
            __builder.AddAttribute(33, "id", "btnPlay");
            __builder.AddMarkupContent(34, "<scan>play again</scan>");
            __builder.CloseElement();
#nullable restore
#line 72 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/Pages/Index.razor"
        }

#line default
#line hidden
#nullable disable
            __builder.CloseElement();
            __builder.CloseElement();
        }
        #pragma warning restore 1998
#nullable restore
#line 79 "/Users/chin-huapan/Documents/Northeastern University/2023winter_DGM6983_Intermediate Programming for Digital Media/intermediate-programming/anna_hw1/Pages/Index.razor"
      

    //declare animals
    List<string> animalEmoji = new List<string>()
{
        "🦊","🦊",
        "🐷","🐷",
        "🐨","🐨",
        "🐣","🐣",
        "🐬","🐬",
        "🦑","🦑",
        "🦔","🦔",
        "🐿","🐿",
    };

    //declare variables
    List<string> shuffledAnimals = new List<string>(); //a list to store sheffled animals
    List<string> showAnimals; // a list to store the status (show/hidden) of animals
    int matchesFound = 0; //amount of matches the player found
    Timer timer; // timer to show how much time passes
    int tenthsOfSecondElapsed = 0; //how many 1/10 seconds elapsed
    string timeDisplay = "Ready?"; //time to display

    // override OnInitalized function
    protected override void OnInitialized()
    {
        timer = new Timer(100); //timer to count 100 millisecond (0.1 second)
        timer.Elapsed += Timer_Tick; //elapsed time + Timer_tick, then give it back to elapsed time
        SetUpGame(); //initial the game
    }

    //initial the game
    private void SetUpGame()
    {
        Random random = new Random(); //random class

        /*shuffle animals by input random numbers into OrderBy function.
        Then convert the type to list and give it back to shuffled animal variable*/
        shuffledAnimals = animalEmoji.OrderBy(item => random.Next()).ToList();

        showAnimals = new List<string>();
        animalEmoji.ForEach(x => showAnimals.Add("?"));


        matchesFound = 0; //reset matchesFound
        tenthsOfSecondElapsed = 0; //reset the time elapsed
        lastAnimalFound = String.Empty; //reset lastAnimalFound
        timeDisplay = "Ready?";//reset time display
        lastIndex = -1;
        chosenIndex = new int[2] { -1, -1 };
    }

    //declare variables
    string lastAnimalFound; //note which animal is found last time
    int lastIndex;
    int[] chosenIndex;

    private void ButtonClick2(string animal, int indexAnimal)
    {
        if (matchesFound == 8) { return; }

        if (chosenIndex[0] > -1 && chosenIndex[1] > -1 && chosenIndex[0] != chosenIndex[1])
        {
            hidden(chosenIndex[1], chosenIndex[0]);
            lastAnimalFound = string.Empty; //clear lastAnimalFound (we don't need to compare this one to another next time)
            lastIndex = -1;
            chosenIndex[0] = -1;
            chosenIndex[1] = -1;
            return;
        }

        if (showAnimals[indexAnimal] != "?") { return; }

        show(indexAnimal);

        //if there is no animal found
        if (lastAnimalFound == string.Empty)
        {
            lastAnimalFound = animal; //give current animal to lastAnimalFound
                                      //lastDescription = animalDescription; //give current description of animal to lastDescription
            lastIndex = indexAnimal;
            chosenIndex[0] = indexAnimal;
            timer.Start(); //timer starts
        }
        else if ((lastAnimalFound == animal) && (lastIndex != indexAnimal))
        {
            lastAnimalFound = string.Empty; //clear lastAnimalFound (we don't need to compare this one to another next time)
            lastIndex = -1;
            chosenIndex[0] = -1;
            chosenIndex[1] = -1;
            matchesFound++;

        }
        else
        {
            lastAnimalFound = string.Empty; //clear lastAnimalFound (we don't need to compare this one to another next time)
            lastIndex = -1;
            chosenIndex[1] = indexAnimal;
        }

        if (matchesFound == 8) {
            timer.Stop(); // timer stops
            timeDisplay += "  Good job!"; //display "play again" wording behind the time
        }

    }

    private void show(int index)
    {
        showAnimals[index] = shuffledAnimals[index];
    }

    //private async void hidden(int index, int lastIndex)
    private void hidden(int index, int lastIndex)
    {

        //await Task.Delay(1000);

        showAnimals[index] = "?";
        showAnimals[lastIndex] = "?";
    }

    //onclick event of animal button
    private void ButtonClick(string animal, string animalDescription, int indexAnimal)
    {
        //if there is no animal found
        if (lastAnimalFound == string.Empty)
        {
            show(indexAnimal);
            lastAnimalFound = animal; //give current animal to lastAnimalFound
                                      //lastDescription = animalDescription; //give current description of animal to lastDescription
            lastIndex = indexAnimal;
            timer.Start(); //timer starts
        }
        /*or, if the animal that player found last time equals to current animal, and same as the descriptions
        also means the player matches successfully*/
        else if ((lastAnimalFound == animal) && (lastIndex != indexAnimal))
        {
            show(indexAnimal);
            /*we select the animals the players found in the suffledAnimals list, and clear them
            then convert to list and give it back to shuggledAnimals*/
            //shuffledAnimals = shuffledAnimals.Select(a => a.Replace(animal, string.Empty)).ToList();
            //showAnimals = shuffledAnimals.Select(a => a.Replace(string.Empty, animal)).ToList();

            lastAnimalFound = string.Empty; //clear lastAnimalFound (we don't need to compare this one to another next time)
            lastIndex = -1;
            matchesFound++; //plus 1 to amount of matches the player found

            //if the amount of matches is 8, also means the player already found out all animals
            if (matchesFound == 8)
            {
                timer.Stop(); // timer stops
                timeDisplay += "  Good job!"; //display "play again" wording behind the time

                //SetUpGame(); // reset the game
            }
        }
        //if the one player choose doesn't match the last one
        else
        {
            show(indexAnimal);
            lastAnimalFound = string.Empty; //clear lastAnimalFound
            lastIndex = -1;
            hidden(indexAnimal, lastIndex);
        }

        ///////////////////


        //showAnimals[animalNumber] = animal;
        showAnimals = shuffledAnimals.Select(a => a.Replace(string.Empty, animal)).ToList();

        //if there is no animal found
        if (lastAnimalFound == string.Empty)
        {
            lastAnimalFound = animal; //give current animal to lastAnimalFound

            timer.Start(); //timer starts
        }
        /*or, if the animal that player found last time equals to current animal, and same as the descriptions
        also means the player matches successfully*/
        else if ((lastAnimalFound == animal) )
        {
            showAnimals[indexAnimal] = shuffledAnimals[indexAnimal];

            /*we select the animals the players found in the suffledAnimals list, and clear them
            then convert to list and give it back to shuggledAnimals*/
            //shuffledAnimals = shuffledAnimals.Select(a => a.Replace(animal, string.Empty)).ToList();
            showAnimals = shuffledAnimals.Select(a => a.Replace(string.Empty, animal)).ToList();

            lastAnimalFound = string.Empty; //clear lastAnimalFound (we don't need to compare this one to another next time)
            matchesFound++; //plus 1 to amount of matches the player found

            //if the amount of matches is 8, also means the player already found out all animals
            if (matchesFound == 8)
            {
                timer.Stop(); // timer stops
                timeDisplay += "  Good job!"; //display "play again" wording behind the time

                //SetUpGame(); // reset the game
            }
        }
        //if the one player choose doesn't match the last one
        else
        {
            lastAnimalFound = string.Empty; //clear lastAnimalFound
                                            //hidden
            showAnimals[indexAnimal] = string.Empty;
        }
    }

    //onclick event of play again button
    private void ButtonPlayAgainClick()
    {
        SetUpGame();// reset the game

    }

    //timer
    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondElapsed++;//plus 1 per 0.1 second

            /*divide tenthsOfSecondElapsed by 10 to convert to second with float type
            convert to string with 0.0s format and pass to timeDisplay*/
            timeDisplay = (tenthsOfSecondElapsed / 10F).ToString("0.0s");
            StateHasChanged(); //notify the component that state has changed || reference: https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.componentbase.statehaschanged?view=aspnetcore-7.0
        });
    }




    //Reference:
    //hidden the btn
    //https://stackoverflow.com/questions/62730963/how-to-hide-buttons-and-show-them-when-clicking-another-button-in-c-sharp-and-as
    //

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
