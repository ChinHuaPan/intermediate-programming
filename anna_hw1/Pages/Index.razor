@page "/"
@using System.Timers
@using System.Collections.Generic;

<style>
    .container {
        width: 400px;
    }

    .btn-animal {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }

    .btn-play {
        width: 200px;
        height: 80px;
        font-size: 30px;
    }

    .hidden {
        visibility: hidden;
    }

    .show {
        visibility: visible;
    }
</style>



<!--anima board-->
<div class="container">
    <div class="row">
        <!--for loop: count from 0 to the amount of animal emojis-->
        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber]; // animal emoji
            var showAnimal = showAnimals[animalNumber];
            var btnId = $"btn-{animalNumber}"; // btn ID
            var indexAnimal = animalNumber;

            <div class="col-3">
                <!--button with onclick event:input current animal emoji and description-->
                <button @onclick="@(() => ButtonClick2(animal, indexAnimal))" type="button"
                        class="btn btn-outline-dark btn-animal" id=@btnId>
                    <!--show the animal emoji on the button-->
                    <h1>@showAnimal</h1>
                </button>
            </div>

        }
    </div>

    <!--matches count-->
    <div class="row">
        <h2>Score: @score</h2>
    </div>

    <!--timer-->
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>

    <div class="row">
        @if (@matchesFound == 8)
        {
            <button @onclick="@(() => ButtonPlayAgainClick())" type="button" class="btn btn-outline-dark btn-play" id="btnPlay">
                <scan>play again</scan>
            </button>
        }
    </div>
</div>




@code{

    //declare animals
    List<string> animalEmoji = new List<string>()
{
        "🦊","🦊",
        "🐷","🐷",
        "🐨","🐨",
        "🐣","🐣",
        "🐬","🐬",
        "🦑","🦑",
        "🦔","🦔",
        "🐿","🐿",
    };

    //declare variables
    List<string> shuffledAnimals = new List<string>(); //a list to store sheffled animals
    List<string> showAnimals; // create a list to store the status (show/hidden) of animals
    int matchesFound = 0; //amount of matches the player found
    Timer timer; // timer to show how much time passes
    int tenthsOfSecondElapsed = 0; //how many 1/10 seconds elapsed
    string timeDisplay = "Ready?"; //time to display

    // override OnInitalized function
    protected override void OnInitialized()
    {
        timer = new Timer(100); //timer to count 100 millisecond (0.1 second)
        timer.Elapsed += Timer_Tick; //elapsed time + Timer_tick, then give it back to elapsed time
        SetUpGame(); //initial the game
    }

    //declare variables
    string lastAnimalFound; //note which animal is found last time
    int[] chosenIndex; //note last chosen 2 index (last and last one, last one)
    int score = 0;
    int lastTimeMatched = 0;
    int timeBetweenMatches = 0;


    //initial the game
    private void SetUpGame()
    {
        Random random = new Random(); //random class

        /*shuffle animals by input random numbers into OrderBy function.
        Then convert the type to list and give it back to shuffled animal variable*/
        shuffledAnimals = animalEmoji.OrderBy(item => random.Next()).ToList();

        showAnimals = new List<string>(); // create a new list with string type to showAnimals
        animalEmoji.ForEach(x => showAnimals.Add("?")); // add "?" to showAnimals list for "amount of animalEmoji" times


        matchesFound = 0; //reset matchesFound
        tenthsOfSecondElapsed = 0; //reset the time elapsed
        lastAnimalFound = String.Empty; //reset lastAnimalFound
        timeDisplay = "Ready?";//reset time display
        chosenIndex = new int[2] { -1, -1 };
        lastTimeMatched = 0;
        score = 0;
    }


    private void ButtonClick2(string animal, int indexAnimal)
    {

        /********* check wheather hidden the cards or not ***********/
        //match failed
        if (chosenIndex[0] > -1 && chosenIndex[1] > -1 && chosenIndex[0] != chosenIndex[1])
        {
            //hidden last 2
            hiddenUnmateched(chosenIndex[1], chosenIndex[0]);
            lastAnimalFound = string.Empty; //clear lastAnimalFound
            chosenIndex[0] = -1;
            chosenIndex[1] = -1;

            //show current chosen
            show(indexAnimal);
            lastAnimalFound = animal; //give current animal to lastAnimalFound
            chosenIndex[0] = indexAnimal;

            return;
        }


        //if the player click the one which is already matched or flipped, do nothing (return)
        if (showAnimals[indexAnimal] != "?") { return; }

        show(indexAnimal);//show animal emoji

        /************ check wheather match is successful or not **************/
        //if there is no animal found or the player matched successfully last time
        if (lastAnimalFound == string.Empty)
        {
            lastAnimalFound = animal; //give current animal to lastAnimalFound
            chosenIndex[0] = indexAnimal; //store the 1st anmimal
            timer.Start(); //timer starts
        }
        //if match successfully
        else if ((lastAnimalFound == animal) && (chosenIndex[0] != chosenIndex[1]))
        {
            lastAnimalFound = string.Empty; //clear lastAnimalFound (we don't need to compare this one to another next time)
            chosenIndex[0] = -1; //reset 1st animal
            chosenIndex[1] = -1; //reset 2nd animal
            matchesFound++;
            int scoreTemp = calScore();
            score = score + scoreTemp;
            Console.WriteLine("total:"+score + ", this time:" + scoreTemp);
        }
        //if matche failed
        else
        {
            lastAnimalFound = string.Empty; //clear lastAnimalFound (we don't need to compare this one to another next time)
            chosenIndex[1] = indexAnimal; //store the 2nd animal
        }

        if (matchesFound == 8)
        {
            timer.Stop(); // timer stops
            timeDisplay += "  Good job!"; //display "play again" wording behind the time
            return;
        }



    }

    private void show(int index)
    {
        showAnimals[index] = shuffledAnimals[index];
    }


    private void hiddenUnmateched(int index, int lastIndex)
    {
        showAnimals[index] = "?";
        showAnimals[lastIndex] = "?";
    }

    //onclick event of play again button
    private void ButtonPlayAgainClick()
    {
        SetUpGame();// reset the game

    }

    //timer
    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondElapsed++;//plus 1 per 0.1 second

            /*divide tenthsOfSecondElapsed by 10 to convert to second with float type
            convert to string with 0.0s format and pass to timeDisplay*/
            timeDisplay = (tenthsOfSecondElapsed / 10F).ToString("0.0s");
            StateHasChanged(); //notify the component that state has changed || reference: https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.componentbase.statehaschanged?view=aspnetcore-7.0

        });
    }

    private int calScore()
    {

        timeBetweenMatches = tenthsOfSecondElapsed - lastTimeMatched;

        lastTimeMatched = tenthsOfSecondElapsed;

        Console.WriteLine("the moment:" + tenthsOfSecondElapsed + ", time between matches:" + timeBetweenMatches);


        if(timeBetweenMatches <= 5)
        {
            return 1000;
        }else if(timeBetweenMatches <= 10)
        {
            return 900;
        }else if (timeBetweenMatches <= 20)
        {
            return 700;
        }else if(timeBetweenMatches <= 30)
        {
            return 500;
        }else if(timeBetweenMatches <= 50)
        {
            return 400;
        }else if(timeBetweenMatches <= 70)
        {
            return 300;
        }else if(timeBetweenMatches <= 100)
        {
            return 200;
        }else
        {
            return 100;
        }
    }


    //Reference:
    //hidden the btn
    //https://stackoverflow.com/questions/62730963/how-to-hide-buttons-and-show-them-when-clicking-another-button-in-c-sharp-and-as
    //
}

