@page "/"
@using System.Timers

<style>
    .container {
        width: 400px;
    }

    .btn-animal {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }

    .btn-play {
        width: 200px;
        height: 80px;
        font-size: 30px;
    }

    .hidden {
        visibility: hidden;
    }

    .show {
        visibility: visible;
    }


</style>

<!--anima board-->
<div class="container"> 
    <div class="row">
        <!--for loop: count from 0 to the amount of animal emojis-->
        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription = $"Button #{animalNumber}";

            <div class="col-3">
                <!--button with onclick event:input current animal emoji and description-->
                <button @onclick="@(() => ButtonClick(animal, uniqueDescription))" tvpe="button" class="btn btn-outline-dark btn-animal">
                    <!--show the animal emoji on the button-->
                    <h1>@animal</h1>
                </button>
            </div>

        }
    </div>

    <!--matches count-->
    <div class="row">
        <h2>Matches found: @matchesFound</h2>
    </div>

    <!--timer-->
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>

    <div class="row">
        <button @onclick="@(() => ButtonPlayAgainClick())" type="button" class="btn btn-outline-dark btn-play">
            <scan>play again</scan>
        </button>
    </div>
</div>




@code{

    //define animals
    List<string> animalEmoji = new List<string>()
    {
        "🦊","🦊",
        "🐷","🐷",
        "🐨","🐨",
        "🐣","🐣",
        "🐬","🐬",
        "🦑","🦑",
        "🦔","🦔",
        "🐿","🐿",
    };

    //define variables
    List<string> shuffledAnimals = new List<string>(); //a list to store sheffled animals
    int matchesFound = 0; //amount of matches the player found
    Timer timer; // timer to show how much time passes
    int tenthsOfSecondElapsed = 0; //how many 1/10 seconds elapsed
    string timeDisplay; //time to display

    // override OnInitalized function
    protected override void OnInitialized()
    {
        timer = new Timer(100); //timer to count 100 millisecond (0.1 second)
        timer.Elapsed += Timer_Tick; //elapsed time + Timer_tick, then give it back to elapsed time
        SetUpGame(); //initial the game
    }

    //initial the game
    private void SetUpGame()
    {
        Random random = new Random(); //random class

        /*shuffle animals by input random numbers into OrderBy function.
        Then convert the type to list and give it back to shuffled animal variable*/
        shuffledAnimals = animalEmoji.OrderBy(item => random.Next()).ToList();

        matchesFound = 0; //reset matchesFound
        tenthsOfSecondElapsed = 0; //reset the time elapsed
        lastAnimalFound = string.Empty; //reset lastAnimalFound
    }

    //define variables
    string lastAnimalFound = string.Empty; //note which animal is found last time
    string lastDescription = string.Empty; //note the description of the last animal the player found 


    //onclick event of animal button
    private void ButtonClick(string animal, string animalDescription)
    {

        Console.WriteLine(animalDescription);

        //if there is no animal is found
        if (lastAnimalFound == string.Empty)
        {
            lastAnimalFound = animal; //give current animal to lastAnimalFound
            lastDescription = animalDescription; //give current description of animal to lastDescription
            timer.Start(); //timer starts
        }
        /*or, if the animal that player found last time equals to current animal, and same as the descriptions
        also means the player matches successfully*/
        else if ((lastAnimalFound == animal) && (lastDescription != animalDescription))
        {
            /*we select the animals the players found in the suffledAnimals list, and clear them
            then convert to list and give it back to shuggledAnimals*/
            shuffledAnimals = shuffledAnimals.Select(a => a.Replace(animal, string.Empty)).ToList();
            lastAnimalFound = string.Empty; //clear lastAnimalFound (we don't need to compare this one to another next time)
            matchesFound++; //plus 1 to amount of matches the player found 

            //if the amount of matches is 8, also means the player already found out all animals
            if (matchesFound == 8)
            {
                timer.Stop(); // timer stops
                timeDisplay += "Good job!"; //display "play again" wording behind the time 

                //SetUpGame(); // reset the game
            }
        }
        //if the one player choose doesn't match the last one
        else
        {
            lastAnimalFound = string.Empty; //clear lastAnimalFound
        }
    }

    //onclick event of play again button
    private void ButtonPlayAgainClick()
    {
        SetUpGame();// reset the game

    }

    //timer
    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondElapsed++;//plus 1 per 0.1 second

            /*divide tenthsOfSecondElapsed by 10 to convert to second with float type
            convert to string with 0.0s format and pass to timeDisplay*/
            timeDisplay = (tenthsOfSecondElapsed / 10F).ToString("0.0s");
            StateHasChanged(); //notify the component that state has changed || reference: https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.componentbase.statehaschanged?view=aspnetcore-7.0
        });
    }


    //HtmlElement tableElem = webBrowser1.Document.GetElementById(tableID);


}