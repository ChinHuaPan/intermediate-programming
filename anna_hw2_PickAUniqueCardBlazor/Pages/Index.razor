@page "/"

<style>
    small{
        margin-top: 10px;
    }
</style>

<div class="container">
    <div class="row">
        <div class="col-8">
            <!-- title -->
            <div class="row">
                <h3>How many cards should I pick?</h3>
            </div>
            <!-- range controler -->
            <div class="row mt-5">
                <input type="range" class="col-10 form-control-range"
                       min="1" max="52" @bind="numberOfCards" />
                <div class="col-2">@numberOfCards</div>
            </div>

            <!-- pick-some-cards btn -->
            <div class="row mt-5">
                <button type="button" class="btn btn-primary"
                        @onclick="UpdateCards">
                    Pick Some Cards
                </button>
            </div>

            <!-- reminder -->
            <div class="row">
                <small>@reminder</small>
            </div>

            <!-- reshuffle btn -->
            <div class="row mt-5">
                <button type="button" class="btn btn-warning" style="display:@showReshuffleBtn"
                        @onclick="Reshuffle">
                    Shuffle
                </button>
            </div>


            <!-- warning -->
            <div class="row">
                <small style="display:@showWarning">@warning</small>
            </div>
        </div>

        <!-- result: picked cards -->
        <div class="col-4">
            <ul class="list-group">
                <!--repeat for amount of pickedCards returns times
                    when pickedCards returns something, pass it to card
                    and create a li tag to show "card"
                    until there is no return of pickedCards-->
                @foreach (var card in pickedCards)
                {
                    <li class="list-group-item">@card</li>
                }
            </ul>
        </div>
    </div>
</div>



@code{
    int numberOfCards = 5; //set inital value as 5
    string[] pickedCards = new string[0]; //create an array with string type, length is 0
    int leftCardsNum = 52; //how many cards are left after picking
    string reminder = "Good luck!"; //reminder message
    string warning = "Choose less cards or shuffle the cards"; //warning message
    string showWarning = "none"; //control the warning message to show or hidden
    string showReshuffleBtn = "none"; //control the shuffle/reset btn to show or hidden

    //onclick event of pick-some-cards
    /*** FUNCTION: UpdateCards ***
    input: none
    output: none
    > pick cards based on the range
    ***/
    void UpdateCards()
    {
        //if the player just pick all the cards (left)
        if (numberOfCards == leftCardsNum)
        {
            Pick(); //pick cards

            reminder = "Cards clear"; //reminder message: there is no card any more
            warning = "Reshuffle the cards"; //warning message: only thing the player can do is reshuffle

            Show(); //show warning message and shuffle btn
        }
        //if the play pick a valid number of cards
        else if (numberOfCards < leftCardsNum)
        {
            Pick(); //pick cards

            reminder = leftCardsNum + " cards left"; //reminder message: show the number of left cards
            warning = "Choose less cards or reshuffle the cards"; //warning message: two options for reference
        }
        //if there is not enough cards for picking
        else
        {
            Show(); //show warning message and shuffle btn

            //do nothing
        }

    }

    //onclick event of reshuffle btn
    /*** FUNCTION: Reshuffle ***
    input: none
    output: none
    > initialize the cards
    ***/
    void Reshuffle()
    {
        CardPicker.initializeCards(); //reset

        pickedCards = new string[0]; //clear pickedCards

        leftCardsNum = 52; //reset leftCardsNum
        numberOfCards = 5; //reset numberOfCards

        showWarning = "none"; //hidden warning message
        showReshuffleBtn = "none"; //hidden reshuffle btn

        reminder = "Reshuffled!  " + leftCardsNum + " cards left"; //reminder message: reshuffled
    }

    /*** FUNCTION: Pick ***
    input: none
    output: none
    > call the methods in CardPicker class to pick cards
    ***/
    void Pick()
    {
        //Use method "PickSomeCards" in class "CardPicker" to pick cards
        //and pass to pickedCards
        pickedCards = CardPicker.PickSomeCards(numberOfCards);
        //get number of left cards
        leftCardsNum = CardPicker.GetLeftCardsNum();
    }

    /*** FUNCTION: Show ***
    input: none
    output: none
    > show the warning message and reshuffle btn
    ***/
    void Show()
    {

        showWarning = "block"; //show warning message
        showReshuffleBtn = "block"; //show reshuffle btn 
    }
}


